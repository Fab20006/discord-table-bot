const { Client, GatewayIntentBits } = require('discord.js');
const axios = require('axios');

console.log('üöÄ D√©marrage du bot...');

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent
  ]
});

// Fonction pour g√©n√©rer l'image du tableau
async function generateTableImage(tableText) {
  try {
    console.log('üìä G√©n√©ration du tableau...');
    const response = await axios.post('https://gb.hlorenzi.com/api/table', {
      data: tableText
    }, {
      responseType: 'arraybuffer',
      timeout: 30000
    });

    console.log('‚úÖ Tableau g√©n√©r√© avec succ√®s');
    return Buffer.from(response.data);
  } catch (error) {
    console.error('‚ùå Erreur API:', error.message);
    throw new Error('Le service de g√©n√©ration est temporairement indisponible');
  }
}

// Quand le bot est pr√™t
client.on('ready', () => {
  console.log(`‚úÖ Bot connect√© en tant que ${client.user.tag}`);
  console.log(`üìä Servant ${client.guilds.cache.size} serveurs`);
  client.user.setActivity('/maketable', { type: 'PLAYING' });
});

// Quand un message est envoy√©
client.on('messageCreate', async (message) => {
  // Ignorer les messages des autres bots
  if (message.author.bot) return;

  // R√©agir seulement √† /maketable
  if (message.content.startsWith('/maketable')) {
    try {
      console.log(`üîÑ Traitement demande de ${message.author.tag}`);
      
      // Message "en cours de traitement"
      const processingMsg = await message.reply('üîÑ G√©n√©ration du tableau en cours...');
      
      // Extraire le texte du tableau
      const lines = message.content.split('\n');
      lines.shift(); // Retirer /maketable
      const tableText = lines.join('\n').trim();
      
      // V√©rifier si le tableau n'est pas vide
      if (!tableText) {
        await processingMsg.edit('‚ùå **Format incorrect!**\n\n**Exemple d\'utilisation:**\n```/maketable\nTag1 - √âquipe Rouge\nJoueur1 1500\nJoueur2 1400\nJoueur3 1300\n\nTag2 - √âquipe Bleue\nJoueur4 1500\nJoueur5 1400\nJoueur6 1300```');
        return;
      }

      // G√©n√©rer l'image
      const imageBuffer = await generateTableImage(tableText);
      
      // Envoyer l'image
      await message.channel.send({
        content: `üìä Tableau g√©n√©r√© pour ${message.author}`,
        files: [{ attachment: imageBuffer, name: 'tableau.png' }]
      });
      
      // Supprimer le message "en cours"
      await processingMsg.delete();
      
    } catch (error) {
      console.error('‚ùå Erreur:', error);
      await message.reply('‚ùå **Erreur:** ' + error.message);
    }
  }
});

// Gestion des erreurs
client.on('error', (error) => {
  console.error('‚ùå Erreur du client:', error);
});

process.on('unhandledRejection', (error) => {
  console.error('‚ùå Erreur non g√©r√©e:', error);
});

// D√©marrer le bot avec le token
const token = process.env.DISCORD_TOKEN;
if (!token) {
  console.error('‚ùå Token Discord manquant!');
  process.exit(1);
}

client.login(token);