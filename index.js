const { Client, GatewayIntentBits } = require('discord.js');
const axios = require('axios');

console.log('üöÄ D√©marrage du bot...');

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent
  ]
});

// Fonction pour g√©n√©rer l'image du tableau (CORRIG√âE)
async function generateTableImage(tableText) {
  try {
    console.log('üìä G√©n√©ration du tableau...');
    console.log('Texte envoy√©:', tableText);
    
    // URL corrig√©e - celle du site web directement
    const response = await axios.post('https://gb.hlorenzi.com/generate', 
      { input: tableText },  // Le param√®tre peut √™tre diff√©rent
      {
        responseType: 'arraybuffer',
        timeout: 30000,
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      }
    );

    console.log('‚úÖ Tableau g√©n√©r√© avec succ√®s');
    return Buffer.from(response.data);
  } catch (error) {
    console.error('‚ùå Erreur API:', error.message);
    console.error('Status:', error.response?.status);
    console.error('URL:', error.config?.url);
    throw new Error('Impossible de g√©n√©rer le tableau. V√©rifiez le format de votre message.');
  }
}

// Version alternative si l'API POST ne fonctionne pas
async function generateTableImageAlternative(tableText) {
  try {
    console.log('üìä Tentative avec m√©thode alternative...');
    
    // Essayer avec FormData comme sur le site web
    const FormData = require('form-data');
    const form = new FormData();
    form.append('input', tableText);
    
    const response = await axios.post('https://gb.hlorenzi.com/generate', 
      form,
      {
        responseType: 'arraybuffer',
        timeout: 30000,
        headers: {
          ...form.getHeaders(),
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      }
    );

    console.log('‚úÖ Tableau g√©n√©r√© avec succ√®s (m√©thode alternative)');
    return Buffer.from(response.data);
  } catch (error) {
    console.error('‚ùå Erreur m√©thode alternative:', error.message);
    throw error;
  }
}

// Quand le bot est pr√™t
client.once('clientReady', () => {
  console.log(`‚úÖ Bot connect√© en tant que ${client.user.tag}`);
  console.log(`üìä Servant ${client.guilds.cache.size} serveurs`);
  client.user.setActivity('/maketable', { type: 'PLAYING' });
});

// Quand un message est envoy√©
client.on('messageCreate', async (message) => {
  if (message.author.bot) return;

  if (message.content.startsWith('/maketable')) {
    try {
      console.log(`üîÑ Traitement demande de ${message.author.tag}`);
      
      const processingMsg = await message.reply('üîÑ G√©n√©ration du tableau en cours...');
      
      const lines = message.content.split('\n');
      lines.shift();
      const tableText = lines.join('\n').trim();
      
      if (!tableText) {
        await processingMsg.edit('‚ùå **Format incorrect!**\n\n**Exemple:**\n```/maketable\nTag1 - √âquipe Rouge\nJoueur1 1500\nJoueur2 1400\n\nTag2 - √âquipe Bleue\nJoueur3 1500\nJoueur4 1400```');
        return;
      }

      // Essayer la m√©thode principale d'abord, puis l'alternative
      let imageBuffer;
      try {
        imageBuffer = await generateTableImage(tableText);
      } catch (firstError) {
        console.log('üîÑ Essai m√©thode alternative...');
        imageBuffer = await generateTableImageAlternative(tableText);
      }
      
      await message.channel.send({
        content: `üìä Tableau g√©n√©r√© pour ${message.author}`,
        files: [{ attachment: imageBuffer, name: 'tableau.png' }]
      });
      
      await processingMsg.delete();
      
    } catch (error) {
      console.error('‚ùå Erreur finale:', error);
      await message.reply('‚ùå **Erreur:** ' + error.message + '\n\nV√©rifiez le format de votre message.');
    }
  }
});

// Gestion des erreurs
client.on('error', (error) => {
  console.error('‚ùå Erreur du client:', error);
});

process.on('unhandledRejection', (error) => {
  console.error('‚ùå Erreur non g√©r√©e:', error);
});

const token = process.env.DISCORD_TOKEN;
if (!token) {
  console.error('‚ùå Token Discord manquant!');
  process.exit(1);
}

client.login(token);